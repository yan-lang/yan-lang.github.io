'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/posts/ansi-code/','title':"ANSI Escape Code",'content':"The way that most programs interact with the Unix terminal is through ANSI escape codes. These are special codes that your program can print in order to give the terminal instructions. Various terminals support different subsets of these codes, and it's difficult to find a \u0026ldquo;authoritative\u0026rdquo; list of what every code does. Wikipedia has a reasonable listing of them, as do many other sites.\nBuild your own Command Line with ANSI escape codes\n"});index.add({'id':1,'href':'/posts/jline-tutorial/','title':"JLine Tutorial",'content':"JLine是一个Java版的GNU ReadLine，通过它，我们可以很方便的实现一个多功能的命令行程序，支持历史记录，光标移动，自动补全，多行编辑，高亮等。\n基本用法 JLine最基本的类是LineReader，如下展示了一个最基本的使用方法:\npublic class Main { public static void main(String[] args) { LineReader reader = LineReaderBuilder.builder().build(); String prompt = \u0026#34;\u0026gt; \u0026#34;; while (true) { String line = null; try { line = reader.readLine(prompt); System.out.println(line); } catch (UserInterruptException e) { // Ignore  } catch (EndOfFileException e) { return; } } } } 这个命令行程序只支持左右移动光标，历史记录。通过配置LineReader我们可以让它支持更多功能，如自动补全，多行编辑等。\n多行编辑 我们可以通过添加一个parser让reader支持多行编辑，如下:\n setEofOnUnclosedBracket配置允许\u0008输入大括号，圆括号，方括号时可以进行多行编辑。 setEofOnUnclosedQuote配置允许输入字符串时可以进行多行编辑。  DefaultParser parser = new DefaultParser(); parser.setEofOnUnclosedBracket(Bracket.CURLY, Bracket.ROUND, Bracket.SQUARE); parser.setEofOnUnclosedQuote(true); LineReader reader = LineReaderBuilder.builder().parser(parser).build(); 如果DefaultParser不满足你的要求，可以参考其实现自己重写一个，注意要继承Parser。\n配置多行编辑模式下的prompt(secondary prompt)\nLineReader reader = LineReaderBuilder.builder().variable(LineReader.SECONDARY_PROMPT_PATTERN, \u0026#34;%M%P \u0026gt; \u0026#34;) Virtual Terminal 配置terminal可以让\u0008程序面对不同平台时更加鲁棒。\nTerminal terminal = TerminalBuilder.builder().build(); LineReader reader = LineReaderBuilder.builder().terminal(terminal) 当需要输出内容时，使用:\nterminal.writer().println(line); Windows平台支持 Windows平台需要配置JNA, 首先到Maven下载jar文件（jar就可以了，source和javadoc可以不用），然后把下载下来的jar文件名改成jna.jar。\n在你编写的命令行程序的manifest里添加Class-Path，再把你编写的命令行程序打包成jar。\nClass-Path: jna.jar 运行时要求两个jar在同一个文件夹中。\n参考资料: https://stackoverflow.com/questions/16499084/java-exception-exception-in-thread-main-java-lang-noclassdeffounderror-net-s\n扩展内容 LineReader.option LineReader.variable 自动缩进 配置自动缩进：\nLineReader reader = LineReaderBuilder.builder().variable(LineReader.INDENTATION, 2) 仿Swift REPL 以下代码可以实现一个仿Swift REPL的命令行程序，支持：\n 光标移动，单行时为左右，多行时为上下左右。 多行编辑 快捷键复制粘贴 自动缩进 自动补全括号 历史记录 \u0026hellip;  package com.yan; import org.jline.builtins.Widgets; import org.jline.reader.EndOfFileException; import org.jline.reader.LineReader; import org.jline.reader.LineReaderBuilder; import org.jline.reader.UserInterruptException; import org.jline.reader.impl.DefaultParser; import org.jline.reader.impl.DefaultParser.Bracket; import org.jline.terminal.Terminal; import org.jline.terminal.TerminalBuilder; import java.io.IOException; public class Main { public static void main(String[] args) { try { DefaultParser parser = new DefaultParser(); parser.setEofOnUnclosedBracket(Bracket.CURLY, Bracket.ROUND, Bracket.SQUARE); parser.setEofOnUnclosedQuote(true); parser.setEscapeChars(null); Terminal terminal = TerminalBuilder.builder().build(); LineReader reader = LineReaderBuilder.builder() .terminal(terminal) .parser(parser) .variable(LineReader.SECONDARY_PROMPT_PATTERN, \u0026#34; \\u001b[38;5;250m%N. \u0026#34;) .variable(LineReader.INDENTATION, 2) .build(); // Create autopair widgets  Widgets.AutopairWidgets autopairWidgets = new Widgets.AutopairWidgets(reader); // Enable autopair  autopairWidgets.enable(); String prompt = \u0026#34; \\u001b[38;5;250m%N\u0026gt; \u0026#34;; int count = 1; while (true) { String line = null; try { reader.variable(LineReader.LINE_OFFSET, count); line = reader.readLine(prompt); System.out.println(line); count += line.split(\u0026#34;\\r\\n|\\r|\\n\u0026#34;).length; } catch (UserInterruptException e) { // Ignore  } catch (EndOfFileException e) { return; } } } catch (IOException e) { e.printStackTrace(); } } } "});index.add({'id':2,'href':'/posts/syntax-highlight-in-hugo/','title':"Syntax Highlight for Yan in Hugo",'content':"为了能让文档阅读起来更顺畅，更美观，我们通常会高亮文档中出现的代码。Hugo使用高亮器chroma来对代码进行分析实现代码高亮，但是chroma不支持我们自己定义的语言Yan。\n另一种高亮器是Pygments, 但是Hugo自0.6版本后就删除了使用pygments作为高亮器的选项。  为了能让Hugo支持高亮Yan语言，我们可以修改chroma或Pygments让它们支持高亮Yan语言，再重新编译Hugo，安装，但是，这种方法太麻烦了。因此，这里我们采用另一种方式进行workaround。\nWorkaround 1.扩展Pygments 我们首先扩展pygments，让其支持高亮Yan语言，详见pgments-yanlexer。\n扩展之后，我们可以使用下列指令获取高亮后的html的代码,以及对应的css代码:\n// 对power.yan进行高亮输出html pygmentize -f html -o power.html power.yan // 获取css代码 pygmentize -f html -a .highlight -S trac \u0026gt; highlight.css 2.复制HTML代码 我们知道markdown是支持直接渲染HTML代码，因此我们可以直接把转换后的HTML代码替换markdown里的代码块。\n3.复制CSS代码 为了让Hugo懂得如何渲染代码区域的HTML代码，我们需要把highlight.css里的所有内容复制到/assets/_custom.scss中。 再稍微调整一下字体，行距等:\n.highlight .yan{ border-radius: .15rem; font-size: .8em; line-height: 2em; font-family: \u0026#34;roboto mono\u0026#34;,monospace; } .highlight pre { background-color: #f8f9fa !important; } Hugo自己的代码块的trac风格背景色是纯白的，这样会不太好看，因此使用.highlight pre强制覆盖pre原来的背景色。  效果 HTML代码 \u0026lt;div class=\u0026#34;highlight\u0026#34;\u0026gt;\u0026lt;pre class=\u0026#39;yan\u0026#39;\u0026gt;\u0026lt;span\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;k\u0026#34;\u0026gt;func\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nf\u0026#34;\u0026gt;power\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;base\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;kt\u0026#34;\u0026gt;int\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;e\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;kt\u0026#34;\u0026gt;int\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;)\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;o\u0026#34;\u0026gt;-\u0026amp;gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;kt\u0026#34;\u0026gt;int\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;{\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;k\u0026#34;\u0026gt;var\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;i\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;o\u0026#34;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;mf\u0026#34;\u0026gt;0\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;k\u0026#34;\u0026gt;var\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;result\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;o\u0026#34;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;mf\u0026#34;\u0026gt;1\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;k\u0026#34;\u0026gt;while\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;i\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;o\u0026#34;\u0026gt;\u0026amp;lt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;e\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;)\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;{\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;result\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;o\u0026#34;\u0026gt;*=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;base\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;i\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;o\u0026#34;\u0026gt;+=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;mf\u0026#34;\u0026gt;1\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;k\u0026#34;\u0026gt;return\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;n\u0026#34;\u0026gt;result\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;p\u0026#34;\u0026gt;}\u0026lt;/span\u0026gt; \u0026lt;/pre\u0026gt;\u0026lt;/div\u0026gt;   效果 func power(base: int, e: int) -\u0026gt; int { var i = 0; var result = 1; while(i \u0026lt; e) { result *= base; i += 1; } return result; }   "});index.add({'id':3,'href':'/posts/hugo-tutorial/','title':"Getting Started with Hugo",'content':""});index.add({'id':4,'href':'/posts/','title':"Posts",'content':""});index.add({'id':5,'href':'/docs/about/','title':"About",'content':"About Yan "});index.add({'id':6,'href':'/docs/code/','title':"Code",'content':"Source Code "});index.add({'id':7,'href':'/docs/contributing/','title':"Contributing",'content':"Contributing "});index.add({'id':8,'href':'/docs/download/','title':"Download",'content':"Download MacOS  MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Linux  Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Windows  Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n  "});index.add({'id':9,'href':'/docs/get_start/','title':"Get Start",'content':"Getting Started Download the precompiled jar file Yan.jar.zip.\nOpen a terminal, and type the following command (requires JRE)\njava -jar yan.jar This command will launch the Yan interpreter, and you can type in any code Yan supports.\nHave a try by yourself !\nLanguage Guide To print a string \u0026ldquo;Hello, world.\u0026rdquo; on the screen, just type in the following statement.\nprint(\u0026#34;hello, world\u0026#34;);  A semicolon is required at the end of each line. This will make parsing a little easier for beginners.  Variable To define a variable in Yan, you can use var keyword.\nLike C, Yan is a strongly typed language, the type of every variable should be able to be determined at compiling stage.\nvar a:int = 3; In the example above, you define an int varaible a with the initial value = 3.\nYou can also omit type specificier int, the compiler will automaticly infer the proper type for you.\nvar a = 3; //int var s = \u0026#34;Hello, world\u0026#34;; //string var c = 4.5; //float If you omit the type specificier, you must provide a initial value for the variable. Otherwise, the compiler could not infer the type.\nAll types supported by Yan: int, float, string, char, bool\nControl Flow Use if to make conditionals, and use while to make loops. Both of parentheses around the condition or loop variable and braces around the body are required.\nif(a \u0026gt; b) { print(a); } else { print(b); } In an if statement, the conditional must be able to be evaluated as an integer, any value except zero will be considered as true.\na = 10; while(a \u0026gt; 0) { print(a) a -= 1; } The requirement for loop variable is the same as it is for conditional of if statement.\nYou can also you break and continue in loop body.\nFunction Use func to declare a function, and use -\u0026gt; to sperate the parameter names and types from the function's return type.\nfunc f(x: int) -\u0026gt; int { if(x == 1 || x == 2) { return 1; } return f(x-1) + f(x-2); } Call a function by following its name with a list of arguments in parentheses.\nprint(f(10)); Expression  Assignment  a = 10; Logical expression  a || b; c \u0026amp;\u0026amp; d; Equality and comparsion  a != b; c == d; a \u0026gt;= b; c \u0026gt; d; a \u0026lt;= b; c \u0026lt; d; Arithmetic experssion  a + b; a - b; a * b; a / b; type casting  a = (int)b; For formal language specification, please refer to Language Specification.\n"});index.add({'id':10,'href':'/categories/','title':"Categories",'content':""});index.add({'id':11,'href':'/docs/','title':"Docs",'content':""});index.add({'id':12,'href':'/','title':"Introduction",'content':"Welcome to Yan Yan is an educational programming language, which is designed for the purpose of practices of Compiler Principle and its related courses.\n"});index.add({'id':13,'href':'/tags/','title':"Tags",'content':""});})();