<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Yan</title>
    <link>https://yan-lang.github.io/docs/</link>
    <description>Recent content in Docs on Yan</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://yan-lang.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://yan-lang.github.io/docs/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yan-lang.github.io/docs/contributing/</guid>
      <description>撰写中&amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yan-lang.github.io/docs/doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yan-lang.github.io/docs/doc/</guid>
      <description>撰写中&amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yan-lang.github.io/docs/experiment/ycc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yan-lang.github.io/docs/experiment/ycc/</guid>
      <description>YCC实验框架 撰写中</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yan-lang.github.io/docs/inprogress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yan-lang.github.io/docs/inprogress/</guid>
      <description>撰写中 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://yan-lang.github.io/docs/source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yan-lang.github.io/docs/source/</guid>
      <description>源代码 “言”项目的代码被分为许多子项目，所有代码都托管在 Github 上。
编译器框架   Yan Foundation : 面向老师和学生的编译器框架。  Yan Language : 为阐述Yan Foundation设计的一款微型语言。  Token util : 面向老师的词法单词类型代码生成工具。  自动评测系统   OJ Website : 自动评测系统的网站前后端。 OJ Core: 自动评测系统的内核。  实验框架   YCC : 基于Yan foundation的C语言编译器实现框架。  </description>
    </item>
    
    <item>
      <title>下载安装</title>
      <link>https://yan-lang.github.io/docs/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yan-lang.github.io/docs/download/</guid>
      <description>下载安装 Yan Foundation是一个以jar包形式发布的Java framework。你可以直接下载jar包导入你的java项目中，也可以使用你熟悉的构建工具，例如Maven和Gradle。
下载Jar包
你可以在以下地方下载到预编译的jar包，当前最新版为0.2-beta。
  Github Release   Maven Central   使用构建工具
Maven 在你的Maven项目中的pom.xml添加以下内容:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.yan-lang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yan-foundation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Gradle 暂无教程 项目模版 如果你只是想要快速体验这个框架，看看它能做些什么，你也可以选择直接下载下面的这些模版。
 使用Idea的Java项目, 请下载 yan-foundation-idea-java 项目。 使用Idea的Maven项目，请下载 yan-foundation-idea-maven 项目。  </description>
    </item>
    
    <item>
      <title>关于言</title>
      <link>https://yan-lang.github.io/docs/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yan-lang.github.io/docs/about/</guid>
      <description>关于&amp;quot;言&amp;rdquo; 言(Yan)是一款面向编译原理教学的实践平台。该项目致力于改善&amp;quot;初次接触编译原理课程的同学&amp;quot;编写第一个编译器&amp;amp;解释器时的编程体验，并为学生与老师提供一个功能较为完善的自动评测系统。
该项目包含数个子项目:
   Yan Foundation (Working in Progress)是一个编写编译器&amp;amp;解释器的框架，它封装了许多编写任意语言编译器时都需要的一些实用模块，如命令行参数处理，文本IO，交互式命令行(REPL)，格式化输出工具和出错处理等。通过该框架，学生能够在学习完理论知识后，结合框架编写少量代码，即可迅速完成一个“比较那么回事”的一个编译器ˉ
   Yan Language (Working in Progress)是为了阐述Foundation用法设计的一个微型编程语言，我们利用Foundation框架为Yan语言编写了一个简易的编译器和解释器。
   Token util 是一个协助老师为词法分析器生成统一的Token类型的工具。
  该项目目前正在开发之中，目前已经基本完成词法以及语法分析器框架部分的开发，欢迎下载我们的Beta版本进行体验。</description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>https://yan-lang.github.io/docs/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yan-lang.github.io/docs/quick-start/</guid>
      <description>快速开始 假设我们有一个语言Simple，这个语言只能定义变量，定义变量的规则是先写一个var关键字，然后空格接一个标识符，标识符只能有字母和数字组成，然后可以有一个初始值number，初始值必须是个整数。无需声明类型。
&amp;#39;var&amp;#39; ID &amp;#39;=&amp;#39; number 现在我们利用Foundation框架，为这个语言编写一个简单的词法分析器和语法分析器。 Let&amp;rsquo;s Start!
新建一个项目 下面详细阐述如何将框架导入你的Java项目之中，如果你之前有过使用Java第三方库的经历，你可以选择跳过这一章节，从 下载安装 页面直接下载jar包自行导入。
 Yan-Foundation Jar导入教程 展开  推荐使用Intellij Idea作为开发环境，当然你也可以使用Eclipse，本文以Idea为例。
 打开Idea，新建一个Java项目，选择Java SDK。  Foundation框架使用Java11构建，因此你需要使用Java11或更高版本。当前Oracle发布的最新版本是Java13，如果你的版本低于11，你可以前往Oracle官网下载最新版本的Java SDK。  一直点Next直到创建好项目，你将会得到类似下图的项目结构。如果你勾选了Create Project from Template，你将会和我一样获得一个Main文件。如果没有，你可以自己创建一个。
导入Foundation依赖   对Java不熟悉的同学，可以把这一步想成C++/C的include，或者是Python的pip install。
 在这里，我们使用jar包(点击下载)的形式导入foundation框架。依照下图步骤操作，在第四步后会弹出一个文件选择界面，选择刚刚下载的jar包，然后一直点击OK即可。
   最开始的开始 创建一个可以执行的解释器还有命令行程序需要多少行代码？100？1000？  使用foundation框架，你只需要在你的main函数中添加如下两行代码即可。
package yan.demo.simple; import yan.foundation.Language; import yan.foundation.Launcher; public class Main { public static void main(String[] args) { Language language = new Language(); Launcher.launch(language, args); } } 解释器 如果你使用Idea，点击main函数旁边的绿色三角形即可启动程序。启动之后，你将看到类似下图所示的一个交互式解释器。</description>
    </item>
    
  </channel>
</rss>